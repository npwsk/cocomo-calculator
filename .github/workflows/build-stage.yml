name: Build/release

on: push

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build/release Electron app on linux or macos
        uses: samuelmeuli/action-electron-builder@v1
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        env:
            CI: false
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          build_script_name: build-electron
          args: "-c.extraMetadata.main=build/electron/main.js"

      - name: Build/release Electron app on windows
        uses: samuelmeuli/action-electron-builder@v1
        if: matrix.os == 'windows-latest'
        env:
            CI: false
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          build_script_name: build-electron-win
          args: "-c.extraMetadata.main=build/electron/main.js"
